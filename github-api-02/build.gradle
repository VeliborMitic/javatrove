/*
 * Copyright 2016-2020 Andres Almiray
 *
 * This file is part of Java Trove Examples
 *
 * Java Trove Examples is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Java Trove Examples is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Java Trove Examples. If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java-library'
    id 'application'
    id 'idea'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'org.kordamp.gradle.stats'      version '0.2.2'
    id 'org.openjfx.javafxplugin'      version '0.0.8'
}

repositories {
    jcenter()
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'pr', 'atlassian'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencies {
    testCompileOnly         "org.projectlombok:lombok:$lombokVersion"
    compileOnly             "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor     "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    api "net.engio:mbassador:$mbassadorVersion"
    api "org.reactfx:reactfx:2.0-M5"
    api "org.slf4j:slf4j-api:$slf4jVersion"
    api "org.jdeferred:jdeferred-core:$jdeferredVersion"
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    api "com.squareup.retrofit2:converter-jackson:$retrofitVersion"
    api "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    api "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    api "com.google.guava:guava:$guavaVersion"
    api("com.google.inject:guice:$guiceVersion") {
        exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
    }
    api 'ru.vyarus:guice-ext-annotations:1.3.0'
    api "org.kordamp.bootstrapfx:bootstrapfx-core:$bootstrapfxVersion"
    api "org.kordamp.ikonli:ikonli-javafx:$ikonliVersion"
    api "org.kordamp.ikonli:ikonli-typicons-pack:$ikonliVersion"
    api "com.miglayout:miglayout-javafx:$miglayoutVersion"
    api "javax.annotation:javax.annotation-api:$annotationVersion"

    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.jukito:jukito:$jukitoVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testImplementation "com.github.tomakehurst:wiremock:$wiremockVersion"
    testImplementation "org.testfx:testfx-core:$testfxVersion"
    testImplementation "org.testfx:testfx-junit:$testfxVersion"
}

mainClassName = 'org.kordamp.javatrove.example02.Launcher'

javafx {
    version = javafxVersion
    modules = [
        'javafx.controls',
        'javafx.fxml',
        'javafx.graphics'
    ]
}

license {
    header = rootProject.file('gradle/HEADER')
    strictCheck = true
    ignoreFailures = true
    mapping {
        java = 'SLASHSTAR_STYLE'
        fxml = 'XML_STYLE'
    }
    ext.year    = '2016-2020'
    ext.author  = 'Andres Almiray'
    ext.project = 'Java Trove Examples'
}

jacoco {
    toolVersion = '0.8.5'
}

idea {
    project {
        jdkName '13'
        languageLevel '13'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'

                def compilerConfiguration = node.component.find { it.'@name' == 'CompilerConfiguration' }
                compilerConfiguration.remove(compilerConfiguration.annotationProcessing)
                compilerConfiguration.append(new XmlParser().parseText("""
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true">
        <processorPath useClasspath="true" />
      </profile>
    </annotationProcessing>"""))
            }
        }
    }
}
